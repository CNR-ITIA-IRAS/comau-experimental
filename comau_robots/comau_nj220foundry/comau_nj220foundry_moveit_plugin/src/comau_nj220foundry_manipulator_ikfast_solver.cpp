/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000048 generated on 2016-08-01 19:32:31.849301
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000048);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)2e-6)
#endif

// used to check input to atan2 for degenerate cases
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)2e-6)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.000005)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48;
x0=IKcos(j[0]);
x1=IKcos(j[2]);
x2=IKsin(j[1]);
x3=IKcos(j[1]);
x4=IKsin(j[2]);
x5=IKcos(j[3]);
x6=IKsin(j[0]);
x7=IKsin(j[3]);
x8=IKcos(j[5]);
x9=IKsin(j[5]);
x10=IKcos(j[4]);
x11=IKsin(j[4]);
x12=((0.25)*x1);
x13=((0.23)*x4);
x14=((0.23)*x5);
x15=((1.0)*x4);
x16=((1.1253)*x6);
x17=((1.0)*x5);
x18=((0.23)*x6);
x19=((1.0)*x6);
x20=((0.25)*x4);
x21=(x1*x2);
x22=(x0*x3);
x23=(x11*x5);
x24=(x0*x2);
x25=(x2*x4);
x26=(x0*x7);
x27=(x3*x6);
x28=(x1*x3);
x29=(x0*x17);
x30=(x15*x3);
x31=((1.0)*x28);
x32=(x19*x21);
x33=((((-1.0)*x30))+x21);
x34=((((-1.0)*x21))+x30);
x35=(x31+((x15*x2)));
x36=((((-1.0)*x15*x22))+(((1.0)*x0*x21)));
x37=((((1.0)*x1*x22))+((x15*x24)));
x38=((-1.0)*x37);
x39=(((x19*x28))+((x15*x2*x6)));
x40=((-1.0)*x39);
x41=(x40*x5);
x42=(x37*x7);
x43=(x38*x5);
x44=(x39*x7);
x45=((((-1.0)*x26))+x41);
x46=(((x11*x35))+((x10*x33*x5)));
x47=(((x11*x36))+((x10*((x43+((x6*x7)))))));
x48=((((-1.0)*x10*x45))+((x11*(((((-1.0)*x32))+(((1.0)*x15*x27)))))));
eerot[0]=(((x47*x8))+((x9*((((x5*x6))+x42)))));
eerot[1]=(((x47*x9))+((x8*(((((-1.0)*x42))+(((-1.0)*x17*x6)))))));
eerot[2]=(((x10*x36))+((x11*(((((-1.0)*x19*x7))+(((-1.0)*x17*x38)))))));
IkReal x49=(x0*x21);
IkReal x50=((1.0)*x22);
eetrans[0]=(((x11*(((((-1.0)*x18*x7))+(((-1.0)*x14*x38))))))+(((1.1253)*x49))+(((1.175)*x24))+(((-1.0)*x12*x50))+(((-1.1253)*x22*x4))+((x10*(((((-1.0)*x13*x50))+(((0.23)*x49))))))+(((0.4)*x0))+(((-1.0)*x20*x24)));
eerot[3]=(((x48*x8))+((x9*(((((-1.0)*x44))+x29)))));
eerot[4]=(((x8*(((((-1.0)*x29))+x44))))+((x48*x9)));
eerot[5]=(((x11*x45))+((x10*(((((-1.0)*x32))+((x27*x4)))))));
IkReal x51=((1.0)*x21);
IkReal x52=(x2*x6);
eetrans[1]=(((x16*x3*x4))+(((-1.0)*x16*x51))+(((-1.175)*x52))+((x20*x52))+((x11*((((x14*x40))+(((-0.23)*x26))))))+((x10*(((((-1.0)*x18*x51))+((x13*x27))))))+((x12*x27))+(((-0.4)*x6)));
eerot[6]=(((x46*x8))+((x34*x7*x9)));
eerot[7]=(((x46*x9))+((x33*x7*x8)));
eerot[8]=(((x10*x35))+((x23*x34)));
eetrans[2]=((0.83)+((x10*(((((0.23)*x28))+((x13*x2))))))+((x23*((((x13*x3))+(((-0.23)*x21))))))+(((-1.0)*x20*x3))+((x12*x2))+(((1.175)*x3))+(((1.1253)*x28))+(((1.1253)*x25)));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 6; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r00;
new_r01=((-1.0)*r01);
new_r02=r02;
new_px=((((0.23)*r02))+(((-1.0)*px)));
new_r10=((-1.0)*r10);
new_r11=r11;
new_r12=((-1.0)*r12);
new_py=((((-0.23)*r12))+py);
new_r20=r20;
new_r21=((-1.0)*r21);
new_r22=r22;
new_pz=((0.83)+(((0.23)*r22))+(((-1.0)*pz)));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x53=((1.0)*px);
IkReal x54=((1.0)*pz);
IkReal x55=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x55))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x54)));
rxp0_2=((((-1.0)*r10*x53))+((py*r00)));
rxp1_0=((((-1.0)*r21*x55))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x54)));
rxp1_2=((((-1.0)*r11*x53))+((py*r01)));
rxp2_0=(((pz*r12))+(((-1.0)*r22*x55)));
rxp2_1=(((px*r22))+(((-1.0)*r02*x54)));
rxp2_2=((((-1.0)*r12*x53))+((py*r02)));
{
IkReal j0eval[1];
j0eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j0, j1, j2]

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x57 = IKatan2WithCheck(IkReal(py),((-1.0)*px),IKFAST_ATAN2_MAGTHRESH);
if(!x57.valid){
continue;
}
IkReal x56=x57.value;
j0array[0]=((-1.0)*x56);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x56)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
IkReal j2array[2], cj2array[2], sj2array[2];
bool j2valid[2]={false};
_nj2 = 2;
if( (((-0.941119059620587)+(((0.369149524460272)*pp))+(((0.295319619568218)*py*sj0))+(((0.295319619568218)*cj0*px)))) < -1-IKFAST_SINCOS_THRESH || (((-0.941119059620587)+(((0.369149524460272)*pp))+(((0.295319619568218)*py*sj0))+(((0.295319619568218)*cj0*px)))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x58=IKasin(((-0.941119059620587)+(((0.369149524460272)*pp))+(((0.295319619568218)*py*sj0))+(((0.295319619568218)*cj0*px))));
j2array[0]=((-1.78940881642719)+(((1.0)*x58)));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
j2array[1]=((1.3521838371626)+(((-1.0)*x58)));
sj2array[1]=IKsin(j2array[1]);
cj2array[1]=IKcos(j2array[1]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
if( j2array[1] > IKPI )
{
    j2array[1]-=IK2PI;
}
else if( j2array[1] < -IKPI )
{    j2array[1]+=IK2PI;
}
j2valid[1] = true;
for(int ij2 = 0; ij2 < 2; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 2; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

{
IkReal j1eval[2];
IkReal x59=(cj0*px);
IkReal x60=((2.5)*cj2);
IkReal x61=(cj2*pz);
IkReal x62=(pz*sj2);
IkReal x63=((0.25)*cj2);
IkReal x64=(py*sj0);
IkReal x65=(sj2*x64);
j1eval[0]=((((11.75)*pz))+(((-2.5)*x62))+((x59*x60))+cj2+(((11.253)*sj2*x59))+((x60*x64))+(((4.5012)*sj2))+(((11.253)*x61))+(((11.253)*x65)));
j1eval[1]=IKsign((((x59*x63))+(((0.45012)*sj2))+(((1.1253)*x65))+(((1.1253)*x61))+(((1.1253)*sj2*x59))+(((-0.25)*x62))+(((0.1)*cj2))+((x63*x64))+(((1.175)*pz))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
IkReal x66=(py*sj0);
IkReal x67=(cj2*pz);
IkReal x68=((11.253)*cj2);
IkReal x69=(cj0*px);
IkReal x70=((1.1253)*cj2);
IkReal x71=((2.5)*sj2);
IkReal x72=((0.25)*sj2);
IkReal x73=(pz*sj2);
j1eval[0]=((4.7)+(((4.5012)*cj2))+(((-1.0)*sj2))+(((-2.5)*x67))+(((-11.253)*x73))+(((-1.0)*x66*x71))+(((11.75)*x69))+(((11.75)*x66))+((x68*x69))+(((-1.0)*x69*x71))+((x66*x68)));
j1eval[1]=IKsign(((0.47)+(((0.45012)*cj2))+(((-1.0)*x66*x72))+((x69*x70))+(((-0.25)*x67))+(((-0.1)*sj2))+(((-1.1253)*x73))+(((-1.0)*x69*x72))+((x66*x70))+(((1.175)*x69))+(((1.175)*x66))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
IkReal x74=cj0*cj0;
IkReal x75=py*py;
IkReal x76=pz*pz;
IkReal x77=px*px;
IkReal x78=(py*sj0);
IkReal x79=(cj0*px);
IkReal x80=(x74*x75);
IkReal x81=(x74*x77);
j1eval[0]=((1.0)+(((12.5)*x78*x79))+(((5.0)*x78))+(((5.0)*x79))+(((6.25)*x76))+(((6.25)*x75))+(((-6.25)*x80))+(((6.25)*x81)));
j1eval[1]=IKsign(((0.16)+(((0.8)*x78))+(((0.8)*x79))+x76+x75+x81+(((-1.0)*x80))+(((2.0)*x78*x79))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j1]

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x82=cj0*cj0;
IkReal x83=py*py;
IkReal x84=(cj2*pz);
IkReal x85=(py*sj0);
IkReal x86=((1.1253)*sj2);
IkReal x87=(cj0*px);
IkReal x88=((0.25)*cj2);
IkReal x89=((0.25)*sj2);
IkReal x90=((1.1253)*x85);
CheckValue<IkReal> x91 = IKatan2WithCheck(IkReal(((-0.47)+(((-1.175)*x87))+(((-1.175)*x85))+(((-0.45012)*cj2))+((x85*x89))+(((0.1)*sj2))+(((-0.25)*x84))+(((-1.1253)*cj2*x87))+(((-1.0)*cj2*x90))+(((-1.0)*pz*x86))+((x87*x89)))),((((0.45012)*sj2))+((x85*x88))+((x85*x86))+((x86*x87))+((pz*x89))+(((0.1)*cj2))+(((-1.1253)*x84))+(((-1.175)*pz))+((x87*x88))),IKFAST_ATAN2_MAGTHRESH);
if(!x91.valid){
continue;
}
CheckValue<IkReal> x92=IKPowWithIntegerCheck(IKsign(((0.16)+(((0.8)*x87))+(((0.8)*x85))+(((2.0)*x85*x87))+((x82*(px*px)))+(((-1.0)*x82*x83))+(pz*pz)+x83)),-1);
if(!x92.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x91.value)+(((1.5707963267949)*(x92.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x93=IKcos(j1);
IkReal x94=IKsin(j1);
IkReal x95=((0.25)*sj2);
IkReal x96=(py*sj0);
IkReal x97=(cj0*px);
IkReal x98=((1.1253)*cj2);
IkReal x99=((0.25)*cj2);
IkReal x100=((1.1253)*sj2);
IkReal x101=(pz*x93);
IkReal x102=((2.35)*x94);
evalcond[0]=((((0.4)*x93))+(((-1.0)*pz*x94))+(((-1.0)*x100))+((x93*x96))+((x93*x97))+(((-1.0)*x99)));
evalcond[1]=((1.175)+(((0.4)*x94))+x101+x98+(((-1.0)*x95))+((x94*x97))+((x94*x96)));
evalcond[2]=(((x100*x94))+(((1.175)*x93))+pz+((x93*x98))+(((-1.0)*x93*x95))+((x94*x99)));
evalcond[3]=((-0.21182491)+(((-1.0)*x102*x96))+(((-1.0)*x102*x97))+(((-0.8)*x97))+(((-0.8)*x96))+(((-0.94)*x94))+(((-2.35)*x101))+(((-1.0)*pp)));
evalcond[4]=((-0.4)+((x100*x93))+(((-1.0)*x94*x98))+((x93*x99))+(((-1.0)*x97))+(((-1.0)*x96))+(((-1.175)*x94))+((x94*x95)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x372=cj2*cj2;
IkReal x373=(py*sj0);
IkReal x374=((1.1253)*cj2);
IkReal x375=(cj0*px);
IkReal x376=((0.25)*sj2);
IkReal x377=((1.0)*pz);
IkReal x378=(cj2*sj2);
CheckValue<IkReal> x379 = IKatan2WithCheck(IkReal(((-1.443125)+(((0.56265)*x378))+(((-2.644455)*cj2))+(pz*pz)+(((0.5875)*sj2))+(((-1.20380009)*x372)))),((-0.281325)+(((-0.4)*pz))+(((0.56265)*x372))+(((-1.0)*x373*x377))+(((0.29375)*cj2))+(((1.3222275)*sj2))+(((-1.0)*x375*x377))+(((1.20380009)*x378))),IKFAST_ATAN2_MAGTHRESH);
if(!x379.valid){
continue;
}
CheckValue<IkReal> x380=IKPowWithIntegerCheck(IKsign(((0.47)+(((0.45012)*cj2))+(((-0.25)*cj2*pz))+(((-1.0)*x373*x376))+(((-0.1)*sj2))+(((1.175)*x373))+(((1.175)*x375))+(((-1.1253)*pz*sj2))+(((-1.0)*x375*x376))+((x374*x375))+((x373*x374)))),-1);
if(!x380.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x379.value)+(((1.5707963267949)*(x380.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x381=IKcos(j1);
IkReal x382=IKsin(j1);
IkReal x383=((0.25)*sj2);
IkReal x384=(py*sj0);
IkReal x385=(cj0*px);
IkReal x386=((1.1253)*cj2);
IkReal x387=((0.25)*cj2);
IkReal x388=((1.1253)*sj2);
IkReal x389=(pz*x381);
IkReal x390=((2.35)*x382);
evalcond[0]=((((0.4)*x381))+(((-1.0)*x387))+(((-1.0)*x388))+(((-1.0)*pz*x382))+((x381*x385))+((x381*x384)));
evalcond[1]=((1.175)+x386+x389+((x382*x384))+((x382*x385))+(((0.4)*x382))+(((-1.0)*x383)));
evalcond[2]=((((-1.0)*x381*x383))+(((1.175)*x381))+((x382*x388))+((x382*x387))+pz+((x381*x386)));
evalcond[3]=((-0.21182491)+(((-1.0)*x384*x390))+(((-0.8)*x384))+(((-0.8)*x385))+(((-1.0)*x385*x390))+(((-0.94)*x382))+(((-1.0)*pp))+(((-2.35)*x389)));
evalcond[4]=((-0.4)+(((-1.175)*x382))+(((-1.0)*x385))+(((-1.0)*x384))+((x382*x383))+((x381*x388))+((x381*x387))+(((-1.0)*x382*x386)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x391=cj2*cj2;
IkReal x392=((1.1253)*sj2);
IkReal x393=(py*sj0);
IkReal x394=(cj0*px);
IkReal x395=((0.25)*cj2);
IkReal x396=(cj2*sj2);
IkReal x397=((1.0)*pz);
CheckValue<IkReal> x398=IKPowWithIntegerCheck(IKsign(((((-0.25)*pz*sj2))+(((0.45012)*sj2))+(((1.1253)*cj2*pz))+((x394*x395))+(((0.1)*cj2))+(((1.175)*pz))+((x393*x395))+((x392*x393))+((x392*x394)))),-1);
if(!x398.valid){
continue;
}
CheckValue<IkReal> x399 = IKatan2WithCheck(IkReal(((0.281325)+(((-0.4)*pz))+(((-0.29375)*cj2))+(((-1.0)*x394*x397))+(((-0.56265)*x391))+(((-1.3222275)*sj2))+(((-1.20380009)*x396))+(((-1.0)*x393*x397)))),((1.26630009)+(((0.56265)*x396))+(((-1.0)*pz*x397))+(((-1.20380009)*x391))),IKFAST_ATAN2_MAGTHRESH);
if(!x399.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x398.value)))+(x399.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x400=IKcos(j1);
IkReal x401=IKsin(j1);
IkReal x402=((0.25)*sj2);
IkReal x403=(py*sj0);
IkReal x404=(cj0*px);
IkReal x405=((1.1253)*cj2);
IkReal x406=((0.25)*cj2);
IkReal x407=((1.1253)*sj2);
IkReal x408=(pz*x400);
IkReal x409=((2.35)*x401);
evalcond[0]=((((-1.0)*pz*x401))+((x400*x404))+((x400*x403))+(((-1.0)*x407))+(((-1.0)*x406))+(((0.4)*x400)));
evalcond[1]=((1.175)+x405+x408+(((-1.0)*x402))+(((0.4)*x401))+((x401*x403))+((x401*x404)));
evalcond[2]=((((1.175)*x400))+(((-1.0)*x400*x402))+pz+((x400*x405))+((x401*x406))+((x401*x407)));
evalcond[3]=((-0.21182491)+(((-0.94)*x401))+(((-1.0)*x403*x409))+(((-1.0)*pp))+(((-1.0)*x404*x409))+(((-2.35)*x408))+(((-0.8)*x403))+(((-0.8)*x404)));
evalcond[4]=((-0.4)+(((-1.175)*x401))+(((-1.0)*x401*x405))+((x400*x407))+((x400*x406))+(((-1.0)*x404))+(((-1.0)*x403))+((x401*x402)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}
}
}

}

}
}
return solutions.GetNumSolutions()>0;
}
inline void rotationfunction0(IkSolutionListBase<IkReal>& solutions) {
for(int rotationiter = 0; rotationiter < 1; ++rotationiter) {
IkReal x103=((1.0)*cj0);
IkReal x104=(r11*sj0);
IkReal x105=(cj0*r02);
IkReal x106=(sj1*sj2);
IkReal x107=(r10*sj0);
IkReal x108=(cj0*r00);
IkReal x109=(cj1*cj2);
IkReal x110=(r12*sj0);
IkReal x111=(cj0*r01);
IkReal x112=(((cj2*sj1))+(((-1.0)*cj1*sj2)));
IkReal x113=(x109+x106);
IkReal x114=(sj0*x112);
IkReal x115=(cj0*x112);
IkReal x116=((((-1.0)*x106))+(((-1.0)*x109)));
new_r00=(((r20*x112))+((x108*x116))+((x107*x116)));
new_r01=(((x111*x116))+((r21*x112))+((x104*x116)));
new_r02=(((x110*x116))+((r22*x112))+((x105*x116)));
new_r10=(((r00*sj0))+(((-1.0)*r10*x103)));
new_r11=((((-1.0)*r11*x103))+((r01*sj0)));
new_r12=((((-1.0)*r12*x103))+((r02*sj0)));
new_r20=(((r20*x113))+((x108*x112))+((x107*x112)));
new_r21=(((x111*x112))+((r21*x113))+((x104*x112)));
new_r22=(((x110*x112))+((r22*x113))+((x105*x112)));
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
cj4array[0]=new_r22;
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
IkReal j5eval[2];
IkReal x117=((1.0)*cj0);
IkReal x118=(r11*sj0);
IkReal x119=(cj0*r02);
IkReal x120=(sj1*sj2);
IkReal x121=(r10*sj0);
IkReal x122=(cj0*r00);
IkReal x123=(cj1*cj2);
IkReal x124=(r12*sj0);
IkReal x125=(cj0*r01);
IkReal x126=x112;
IkReal x127=(x123+x120);
IkReal x128=(sj0*x126);
IkReal x129=(cj0*x126);
IkReal x130=x116;
new_r00=(((x121*x130))+((x122*x130))+((r20*x126)));
new_r01=(((r21*x126))+((x125*x130))+((x118*x130)));
new_r02=(((r22*x126))+((x124*x130))+((x119*x130)));
new_r10=(((r00*sj0))+(((-1.0)*r10*x117)));
new_r11=(((r01*sj0))+(((-1.0)*r11*x117)));
new_r12=((((-1.0)*r12*x117))+((r02*sj0)));
new_r20=(((x121*x126))+((x122*x126))+((r20*x127)));
new_r21=(((r21*x127))+((x125*x126))+((x118*x126)));
new_r22=(((r22*x127))+((x124*x126))+((x119*x126)));
j5eval[0]=sj4;
j5eval[1]=IKsign(sj4);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
IkReal x131=((1.0)*cj0);
IkReal x132=(r11*sj0);
IkReal x133=(cj0*r02);
IkReal x134=(sj1*sj2);
IkReal x135=(r10*sj0);
IkReal x136=(cj0*r00);
IkReal x137=(cj1*cj2);
IkReal x138=(r12*sj0);
IkReal x139=(cj0*r01);
IkReal x140=x112;
IkReal x141=(x134+x137);
IkReal x142=(sj0*x140);
IkReal x143=(cj0*x140);
IkReal x144=x116;
new_r00=(((r20*x140))+((x136*x144))+((x135*x144)));
new_r01=(((r21*x140))+((x132*x144))+((x139*x144)));
new_r02=(((x138*x144))+((x133*x144))+((r22*x140)));
new_r10=(((r00*sj0))+(((-1.0)*r10*x131)));
new_r11=(((r01*sj0))+(((-1.0)*r11*x131)));
new_r12=((((-1.0)*r12*x131))+((r02*sj0)));
new_r20=(((r20*x141))+((x136*x140))+((x135*x140)));
new_r21=(((r21*x141))+((x132*x140))+((x139*x140)));
new_r22=(((x138*x140))+((x133*x140))+((r22*x141)));
j3eval[0]=sj4;
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));
evalcond[1]=((-1.0)+new_r22);
evalcond[2]=new_r02;
evalcond[3]=new_r12;
evalcond[4]=new_r21;
evalcond[5]=new_r20;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
CheckValue<IkReal> x146 = IKatan2WithCheck(IkReal(new_r02),new_r12,IKFAST_ATAN2_MAGTHRESH);
if(!x146.valid){
continue;
}
IkReal x145=x146.value;
j3array[0]=((-1.0)*x145);
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
j3array[1]=((3.14159265358979)+(((-1.0)*x145)));
sj3array[1]=IKsin(j3array[1]);
cj3array[1]=IKcos(j3array[1]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
if( j3array[1] > IKPI )
{
    j3array[1]-=IK2PI;
}
else if( j3array[1] < -IKPI )
{    j3array[1]+=IK2PI;
}
j3valid[1] = true;
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*new_r02*(IKsin(j3))))+((new_r12*(IKcos(j3)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x147=((1.0)*new_r01);
if( IKabs(((((-1.0)*cj3*x147))+(((-1.0)*new_r00*sj3)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj3*x147))+((cj3*new_r00)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj3*x147))+(((-1.0)*new_r00*sj3))))+IKsqr(((((-1.0)*sj3*x147))+((cj3*new_r00))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((-1.0)*cj3*x147))+(((-1.0)*new_r00*sj3))), ((((-1.0)*sj3*x147))+((cj3*new_r00))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x148=IKsin(j5);
IkReal x149=IKcos(j5);
IkReal x150=((1.0)*cj3);
IkReal x151=(sj3*x148);
IkReal x152=((1.0)*x149);
IkReal x153=(x149*x150);
evalcond[0]=(((new_r11*sj3))+x148+((cj3*new_r01)));
evalcond[1]=(((new_r00*sj3))+x148+(((-1.0)*new_r10*x150)));
evalcond[2]=(((new_r01*sj3))+x149+(((-1.0)*new_r11*x150)));
evalcond[3]=(((cj3*x148))+new_r01+((sj3*x149)));
evalcond[4]=((((-1.0)*x152))+((new_r10*sj3))+((cj3*new_r00)));
evalcond[5]=((((-1.0)*x153))+x151+new_r00);
evalcond[6]=((((-1.0)*x153))+x151+new_r11);
evalcond[7]=((((-1.0)*x148*x150))+(((-1.0)*sj3*x152))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)));
evalcond[1]=((1.0)+new_r22);
evalcond[2]=new_r02;
evalcond[3]=new_r12;
evalcond[4]=new_r21;
evalcond[5]=new_r20;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
CheckValue<IkReal> x155 = IKatan2WithCheck(IkReal(new_r02),new_r12,IKFAST_ATAN2_MAGTHRESH);
if(!x155.valid){
continue;
}
IkReal x154=x155.value;
j3array[0]=((-1.0)*x154);
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
j3array[1]=((3.14159265358979)+(((-1.0)*x154)));
sj3array[1]=IKsin(j3array[1]);
cj3array[1]=IKcos(j3array[1]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
if( j3array[1] > IKPI )
{
    j3array[1]-=IK2PI;
}
else if( j3array[1] < -IKPI )
{    j3array[1]+=IK2PI;
}
j3valid[1] = true;
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*new_r02*(IKsin(j3))))+((new_r12*(IKcos(j3)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x156=((1.0)*sj3);
if( IKabs((((cj3*new_r01))+(((-1.0)*new_r00*x156)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj3*new_r00))+(((-1.0)*new_r01*x156)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj3*new_r01))+(((-1.0)*new_r00*x156))))+IKsqr(((((-1.0)*cj3*new_r00))+(((-1.0)*new_r01*x156))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((((cj3*new_r01))+(((-1.0)*new_r00*x156))), ((((-1.0)*cj3*new_r00))+(((-1.0)*new_r01*x156))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x157=IKcos(j5);
IkReal x158=IKsin(j5);
IkReal x159=((1.0)*cj3);
IkReal x160=(sj3*x157);
IkReal x161=((1.0)*x158);
IkReal x162=(x158*x159);
evalcond[0]=(((new_r10*sj3))+x157+((cj3*new_r00)));
evalcond[1]=(((new_r00*sj3))+x158+(((-1.0)*new_r10*x159)));
evalcond[2]=(((new_r01*sj3))+x157+(((-1.0)*new_r11*x159)));
evalcond[3]=((((-1.0)*x161))+((new_r11*sj3))+((cj3*new_r01)));
evalcond[4]=(((cj3*x157))+new_r00+((sj3*x158)));
evalcond[5]=((((-1.0)*x162))+x160+new_r01);
evalcond[6]=((((-1.0)*x162))+x160+new_r10);
evalcond[7]=((((-1.0)*x157*x159))+new_r11+(((-1.0)*sj3*x161)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j3, j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x164=IKPowWithIntegerCheck(sj4,-1);
if(!x164.valid){
continue;
}
IkReal x163=x164.value;
CheckValue<IkReal> x165=IKPowWithIntegerCheck(new_r12,-1);
if(!x165.valid){
continue;
}
if( IKabs((x163*(x165.value)*(((-1.0)+(new_r02*new_r02)+(cj4*cj4))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r02*x163)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x163*(x165.value)*(((-1.0)+(new_r02*new_r02)+(cj4*cj4)))))+IKsqr(((-1.0)*new_r02*x163))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((x163*(x165.value)*(((-1.0)+(new_r02*new_r02)+(cj4*cj4)))), ((-1.0)*new_r02*x163));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x166=IKcos(j3);
IkReal x167=IKsin(j3);
IkReal x168=((1.0)*cj4);
IkReal x169=(new_r02*x166);
IkReal x170=(sj4*x167);
IkReal x171=(sj4*x166);
IkReal x172=(new_r12*x167);
evalcond[0]=(x171+new_r02);
evalcond[1]=(x170+new_r12);
evalcond[2]=(((new_r12*x166))+(((-1.0)*new_r02*x167)));
evalcond[3]=(sj4+x172+x169);
evalcond[4]=(((cj4*x169))+((cj4*x172))+((new_r22*sj4)));
evalcond[5]=(((new_r00*x171))+((new_r10*x170))+(((-1.0)*new_r20*x168)));
evalcond[6]=(((new_r01*x171))+(((-1.0)*new_r21*x168))+((new_r11*x170)));
evalcond[7]=((1.0)+((new_r12*x170))+(((-1.0)*new_r22*x168))+((sj4*x169)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[2];
IkReal x173=((1.0)*cj0);
IkReal x174=(r11*sj0);
IkReal x175=(cj0*r02);
IkReal x176=(sj1*sj2);
IkReal x177=(r10*sj0);
IkReal x178=(cj0*r00);
IkReal x179=(cj1*cj2);
IkReal x180=(r12*sj0);
IkReal x181=(cj0*r01);
IkReal x182=x112;
IkReal x183=(x179+x176);
IkReal x184=(sj0*x182);
IkReal x185=(cj0*x182);
IkReal x186=x116;
new_r00=(((x177*x186))+((x178*x186))+((r20*x182)));
new_r01=(((x174*x186))+((r21*x182))+((x181*x186)));
new_r02=(((x180*x186))+((x175*x186))+((r22*x182)));
new_r10=(((r00*sj0))+(((-1.0)*r10*x173)));
new_r11=((((-1.0)*r11*x173))+((r01*sj0)));
new_r12=(((r02*sj0))+(((-1.0)*r12*x173)));
new_r20=(((x177*x182))+((x178*x182))+((r20*x183)));
new_r21=(((x174*x182))+((r21*x183))+((x181*x182)));
new_r22=(((x180*x182))+((x175*x182))+((r22*x183)));
j5eval[0]=sj4;
j5eval[1]=IKsign(sj4);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
IkReal x187=((1.0)*cj0);
IkReal x188=(r11*sj0);
IkReal x189=(cj0*r02);
IkReal x190=(sj1*sj2);
IkReal x191=(r10*sj0);
IkReal x192=(cj0*r00);
IkReal x193=(cj1*cj2);
IkReal x194=(r12*sj0);
IkReal x195=(cj0*r01);
IkReal x196=x112;
IkReal x197=(x193+x190);
IkReal x198=(sj0*x196);
IkReal x199=(cj0*x196);
IkReal x200=x116;
new_r00=(((x192*x200))+((x191*x200))+((r20*x196)));
new_r01=(((x195*x200))+((x188*x200))+((r21*x196)));
new_r02=(((x194*x200))+((x189*x200))+((r22*x196)));
new_r10=(((r00*sj0))+(((-1.0)*r10*x187)));
new_r11=((((-1.0)*r11*x187))+((r01*sj0)));
new_r12=((((-1.0)*r12*x187))+((r02*sj0)));
new_r20=(((r20*x197))+((x192*x196))+((x191*x196)));
new_r21=(((x188*x196))+((x195*x196))+((r21*x197)));
new_r22=(((x189*x196))+((x194*x196))+((r22*x197)));
j5eval[0]=sj4;
j5eval[1]=sj3;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
IkReal x201=((1.0)*cj0);
IkReal x202=(r11*sj0);
IkReal x203=(cj0*r02);
IkReal x204=(sj1*sj2);
IkReal x205=(r10*sj0);
IkReal x206=(cj0*r00);
IkReal x207=(cj1*cj2);
IkReal x208=(r12*sj0);
IkReal x209=(cj0*r01);
IkReal x210=x112;
IkReal x211=(x207+x204);
IkReal x212=(sj0*x210);
IkReal x213=(cj0*x210);
IkReal x214=x116;
new_r00=(((x206*x214))+((x205*x214))+((r20*x210)));
new_r01=(((r21*x210))+((x202*x214))+((x209*x214)));
new_r02=(((x203*x214))+((x208*x214))+((r22*x210)));
new_r10=(((r00*sj0))+(((-1.0)*r10*x201)));
new_r11=((((-1.0)*r11*x201))+((r01*sj0)));
new_r12=((((-1.0)*r12*x201))+((r02*sj0)));
new_r20=(((x206*x210))+((x205*x210))+((r20*x211)));
new_r21=(((r21*x211))+((x202*x210))+((x209*x210)));
new_r22=(((x203*x210))+((x208*x210))+((r22*x211)));
j5eval[0]=sj4;
j5eval[1]=cj3;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[10];
bool bgotonextstatement = true;
do
{
IkReal x215=(cj3*new_r12);
IkReal x216=(new_r02*sj3);
IkReal x217=(((new_r12*sj3))+((cj3*new_r02)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));
evalcond[1]=((-1.0)+new_r22);
evalcond[2]=new_r02;
evalcond[3]=new_r12;
evalcond[4]=new_r21;
evalcond[5]=new_r20;
evalcond[6]=(x215+(((-1.0)*x216)));
evalcond[7]=(x216+(((-1.0)*x215)));
evalcond[8]=x217;
evalcond[9]=x217;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x218=((1.0)*new_r01);
if( IKabs(((((-1.0)*cj3*x218))+(((-1.0)*new_r00*sj3)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj3*x218))+((cj3*new_r00)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj3*x218))+(((-1.0)*new_r00*sj3))))+IKsqr(((((-1.0)*sj3*x218))+((cj3*new_r00))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((-1.0)*cj3*x218))+(((-1.0)*new_r00*sj3))), ((((-1.0)*sj3*x218))+((cj3*new_r00))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x219=IKsin(j5);
IkReal x220=IKcos(j5);
IkReal x221=((1.0)*cj3);
IkReal x222=(sj3*x219);
IkReal x223=((1.0)*x220);
IkReal x224=(x220*x221);
evalcond[0]=(((new_r11*sj3))+x219+((cj3*new_r01)));
evalcond[1]=((((-1.0)*new_r10*x221))+((new_r00*sj3))+x219);
evalcond[2]=((((-1.0)*new_r11*x221))+((new_r01*sj3))+x220);
evalcond[3]=(((cj3*x219))+((sj3*x220))+new_r01);
evalcond[4]=(((new_r10*sj3))+((cj3*new_r00))+(((-1.0)*x223)));
evalcond[5]=(x222+new_r00+(((-1.0)*x224)));
evalcond[6]=(x222+new_r11+(((-1.0)*x224)));
evalcond[7]=((((-1.0)*x219*x221))+(((-1.0)*sj3*x223))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x225=(cj3*new_r12);
IkReal x226=(new_r12*sj3);
IkReal x227=(new_r02*sj3);
IkReal x228=(cj3*new_r02);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)));
evalcond[1]=((1.0)+new_r22);
evalcond[2]=new_r02;
evalcond[3]=new_r12;
evalcond[4]=new_r21;
evalcond[5]=new_r20;
evalcond[6]=(x225+(((-1.0)*x227)));
evalcond[7]=(x227+(((-1.0)*x225)));
evalcond[8]=(x228+x226);
evalcond[9]=((((-1.0)*x228))+(((-1.0)*x226)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x229=((1.0)*sj3);
if( IKabs((((cj3*new_r01))+(((-1.0)*new_r00*x229)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*new_r01*x229))+(((-1.0)*cj3*new_r00)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj3*new_r01))+(((-1.0)*new_r00*x229))))+IKsqr(((((-1.0)*new_r01*x229))+(((-1.0)*cj3*new_r00))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((((cj3*new_r01))+(((-1.0)*new_r00*x229))), ((((-1.0)*new_r01*x229))+(((-1.0)*cj3*new_r00))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x230=IKcos(j5);
IkReal x231=IKsin(j5);
IkReal x232=((1.0)*cj3);
IkReal x233=(sj3*x230);
IkReal x234=((1.0)*x231);
IkReal x235=(x231*x232);
evalcond[0]=(((new_r10*sj3))+x230+((cj3*new_r00)));
evalcond[1]=(((new_r00*sj3))+x231+(((-1.0)*new_r10*x232)));
evalcond[2]=(((new_r01*sj3))+x230+(((-1.0)*new_r11*x232)));
evalcond[3]=(((new_r11*sj3))+(((-1.0)*x234))+((cj3*new_r01)));
evalcond[4]=(((cj3*x230))+new_r00+((sj3*x231)));
evalcond[5]=((((-1.0)*x235))+x233+new_r01);
evalcond[6]=((((-1.0)*x235))+x233+new_r10);
evalcond[7]=((((-1.0)*x230*x232))+(((-1.0)*sj3*x234))+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x236=(new_r22+(((-1.0)*cj4)));
IkReal x237=(sj4+new_r12);
IkReal x238=((1.0)*cj4);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=x236;
evalcond[2]=x236;
evalcond[3]=new_r02;
evalcond[4]=x237;
evalcond[5]=x237;
evalcond[6]=(((cj4*new_r12))+((new_r22*sj4)));
evalcond[7]=(((new_r10*sj4))+(((-1.0)*new_r20*x238)));
evalcond[8]=((((-1.0)*new_r21*x238))+((new_r11*sj4)));
evalcond[9]=((1.0)+(((-1.0)*new_r22*x238))+((new_r12*sj4)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r00))+IKsqr(((-1.0)*new_r01))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((-1.0)*new_r00), ((-1.0)*new_r01));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x239=IKcos(j5);
IkReal x240=IKsin(j5);
IkReal x241=((1.0)*new_r12);
IkReal x242=((1.0)*x239);
evalcond[0]=(x240+new_r00);
evalcond[1]=(x239+new_r01);
evalcond[2]=(((new_r12*x239))+new_r20);
evalcond[3]=(((new_r22*x240))+new_r11);
evalcond[4]=((((-1.0)*x240*x241))+new_r21);
evalcond[5]=((((-1.0)*new_r22*x242))+new_r10);
evalcond[6]=((((-1.0)*new_r21*x241))+x240+((new_r11*new_r22)));
evalcond[7]=((((-1.0)*new_r20*x241))+((new_r10*new_r22))+(((-1.0)*x242)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x243=(new_r22+(((-1.0)*cj4)));
IkReal x244=((1.0)*cj4);
IkReal x245=((1.0)*new_r12);
IkReal x246=((1.0)*sj4);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=x243;
evalcond[2]=x243;
evalcond[3]=new_r02;
evalcond[4]=((((-1.0)*x246))+new_r12);
evalcond[5]=(sj4+(((-1.0)*x245)));
evalcond[6]=(((new_r22*sj4))+(((-1.0)*new_r12*x244)));
evalcond[7]=((((-1.0)*new_r20*x244))+(((-1.0)*new_r10*x246)));
evalcond[8]=((((-1.0)*new_r21*x244))+(((-1.0)*new_r11*x246)));
evalcond[9]=((1.0)+(((-1.0)*sj4*x245))+(((-1.0)*new_r22*x244)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r00)+IKsqr(new_r01)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(new_r00, new_r01);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x247=IKsin(j5);
IkReal x248=IKcos(j5);
IkReal x249=((1.0)*new_r11);
IkReal x250=((1.0)*new_r10);
IkReal x251=((1.0)*x248);
evalcond[0]=(((new_r12*x247))+new_r21);
evalcond[1]=(x247+(((-1.0)*new_r00)));
evalcond[2]=(x248+(((-1.0)*new_r01)));
evalcond[3]=(new_r20+(((-1.0)*new_r12*x251)));
evalcond[4]=(((new_r22*x247))+(((-1.0)*x249)));
evalcond[5]=((((-1.0)*new_r22*x251))+(((-1.0)*x250)));
evalcond[6]=((((-1.0)*new_r22*x249))+((new_r12*new_r21))+x247);
evalcond[7]=(((new_r12*new_r20))+(((-1.0)*new_r22*x250))+(((-1.0)*x251)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x252=(new_r22+(((-1.0)*cj4)));
IkReal x253=(sj4+new_r02);
IkReal x254=((1.0)*cj4);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=x252;
evalcond[2]=x252;
evalcond[3]=x253;
evalcond[4]=new_r12;
evalcond[5]=x253;
evalcond[6]=(((cj4*new_r02))+((new_r22*sj4)));
evalcond[7]=(((new_r00*sj4))+(((-1.0)*new_r20*x254)));
evalcond[8]=((((-1.0)*new_r21*x254))+((new_r01*sj4)));
evalcond[9]=((1.0)+((new_r02*sj4))+(((-1.0)*new_r22*x254)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r10)+IKsqr(new_r11)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(new_r10, new_r11);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x255=IKcos(j5);
IkReal x256=IKsin(j5);
IkReal x257=((1.0)*new_r02);
IkReal x258=((1.0)*x255);
evalcond[0]=(((new_r02*x255))+new_r20);
evalcond[1]=(x256+(((-1.0)*new_r10)));
evalcond[2]=(x255+(((-1.0)*new_r11)));
evalcond[3]=(((new_r22*x256))+new_r01);
evalcond[4]=((((-1.0)*x256*x257))+new_r21);
evalcond[5]=(new_r00+(((-1.0)*new_r22*x258)));
evalcond[6]=((((-1.0)*new_r21*x257))+((new_r01*new_r22))+x256);
evalcond[7]=(((new_r00*new_r22))+(((-1.0)*new_r20*x257))+(((-1.0)*x258)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x259=(new_r22+(((-1.0)*cj4)));
IkReal x260=((1.0)*cj4);
IkReal x261=((1.0)*sj4);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
evalcond[1]=x259;
evalcond[2]=x259;
evalcond[3]=(new_r02+(((-1.0)*x261)));
evalcond[4]=new_r12;
evalcond[5]=(sj4+(((-1.0)*new_r02)));
evalcond[6]=(((new_r22*sj4))+(((-1.0)*new_r02*x260)));
evalcond[7]=((((-1.0)*new_r00*x261))+(((-1.0)*new_r20*x260)));
evalcond[8]=((((-1.0)*new_r01*x261))+(((-1.0)*new_r21*x260)));
evalcond[9]=((1.0)+(((-1.0)*new_r22*x260))+(((-1.0)*new_r02*x261)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r10))+IKsqr(((-1.0)*new_r11))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((-1.0)*new_r10), ((-1.0)*new_r11));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x262=IKsin(j5);
IkReal x263=IKcos(j5);
IkReal x264=((1.0)*new_r00);
IkReal x265=((1.0)*new_r01);
IkReal x266=((1.0)*x263);
evalcond[0]=(x262+new_r10);
evalcond[1]=(x263+new_r11);
evalcond[2]=(new_r21+((new_r02*x262)));
evalcond[3]=(new_r20+(((-1.0)*new_r02*x266)));
evalcond[4]=(((new_r22*x262))+(((-1.0)*x265)));
evalcond[5]=((((-1.0)*new_r22*x266))+(((-1.0)*x264)));
evalcond[6]=((((-1.0)*new_r22*x265))+x262+((new_r02*new_r21)));
evalcond[7]=((((-1.0)*new_r22*x264))+((new_r02*new_r20))+(((-1.0)*x266)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x268=IKPowWithIntegerCheck(sj4,-1);
if(!x268.valid){
continue;
}
IkReal x267=x268.value;
CheckValue<IkReal> x269=IKPowWithIntegerCheck(cj3,-1);
if(!x269.valid){
continue;
}
if( IKabs(((-1.0)*new_r21*x267)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x267*(x269.value)*((((new_r11*sj4))+(((-1.0)*cj4*new_r21*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r21*x267))+IKsqr((x267*(x269.value)*((((new_r11*sj4))+(((-1.0)*cj4*new_r21*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((-1.0)*new_r21*x267), (x267*(x269.value)*((((new_r11*sj4))+(((-1.0)*cj4*new_r21*sj3))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[12];
IkReal x270=IKsin(j5);
IkReal x271=IKcos(j5);
IkReal x272=(cj3*new_r00);
IkReal x273=(cj3*cj4);
IkReal x274=(cj4*sj3);
IkReal x275=((1.0)*cj3);
IkReal x276=(sj3*x270);
IkReal x277=((1.0)*x271);
evalcond[0]=(new_r21+((sj4*x270)));
evalcond[1]=((((-1.0)*sj4*x277))+new_r20);
evalcond[2]=(((new_r00*sj3))+x270+(((-1.0)*new_r10*x275)));
evalcond[3]=(((new_r01*sj3))+x271+(((-1.0)*new_r11*x275)));
evalcond[4]=(((cj4*x270))+((new_r11*sj3))+((cj3*new_r01)));
evalcond[5]=(((sj3*x271))+((x270*x273))+new_r01);
evalcond[6]=((((-1.0)*cj4*x277))+((new_r10*sj3))+x272);
evalcond[7]=((((-1.0)*x273*x277))+x276+new_r00);
evalcond[8]=((((-1.0)*x271*x275))+((x270*x274))+new_r11);
evalcond[9]=((((-1.0)*x274*x277))+(((-1.0)*x270*x275))+new_r10);
evalcond[10]=(x270+((new_r01*x273))+((new_r21*sj4))+((new_r11*x274)));
evalcond[11]=(((new_r20*sj4))+((cj4*x272))+(((-1.0)*x277))+((new_r10*x274)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x279=IKPowWithIntegerCheck(sj4,-1);
if(!x279.valid){
continue;
}
IkReal x278=x279.value;
CheckValue<IkReal> x280=IKPowWithIntegerCheck(sj3,-1);
if(!x280.valid){
continue;
}
if( IKabs(((-1.0)*new_r21*x278)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x278*(x280.value)*(((((-1.0)*new_r01*sj4))+((cj3*cj4*new_r21)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r21*x278))+IKsqr((x278*(x280.value)*(((((-1.0)*new_r01*sj4))+((cj3*cj4*new_r21))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((-1.0)*new_r21*x278), (x278*(x280.value)*(((((-1.0)*new_r01*sj4))+((cj3*cj4*new_r21))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[12];
IkReal x281=IKsin(j5);
IkReal x282=IKcos(j5);
IkReal x283=(cj3*new_r00);
IkReal x284=(cj3*cj4);
IkReal x285=(cj4*sj3);
IkReal x286=((1.0)*cj3);
IkReal x287=(sj3*x281);
IkReal x288=((1.0)*x282);
evalcond[0]=(new_r21+((sj4*x281)));
evalcond[1]=((((-1.0)*sj4*x288))+new_r20);
evalcond[2]=(((new_r00*sj3))+x281+(((-1.0)*new_r10*x286)));
evalcond[3]=(((new_r01*sj3))+x282+(((-1.0)*new_r11*x286)));
evalcond[4]=(((new_r11*sj3))+((cj3*new_r01))+((cj4*x281)));
evalcond[5]=(((sj3*x282))+new_r01+((x281*x284)));
evalcond[6]=(((new_r10*sj3))+x283+(((-1.0)*cj4*x288)));
evalcond[7]=(x287+(((-1.0)*x284*x288))+new_r00);
evalcond[8]=((((-1.0)*x282*x286))+new_r11+((x281*x285)));
evalcond[9]=((((-1.0)*x281*x286))+(((-1.0)*x285*x288))+new_r10);
evalcond[10]=(x281+((new_r21*sj4))+((new_r11*x285))+((new_r01*x284)));
evalcond[11]=(((new_r20*sj4))+(((-1.0)*x288))+((cj4*x283))+((new_r10*x285)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x289 = IKatan2WithCheck(IkReal(((-1.0)*new_r21)),new_r20,IKFAST_ATAN2_MAGTHRESH);
if(!x289.valid){
continue;
}
CheckValue<IkReal> x290=IKPowWithIntegerCheck(IKsign(sj4),-1);
if(!x290.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x289.value)+(((1.5707963267949)*(x290.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[12];
IkReal x291=IKsin(j5);
IkReal x292=IKcos(j5);
IkReal x293=(cj3*new_r00);
IkReal x294=(cj3*cj4);
IkReal x295=(cj4*sj3);
IkReal x296=((1.0)*cj3);
IkReal x297=(sj3*x291);
IkReal x298=((1.0)*x292);
evalcond[0]=(((sj4*x291))+new_r21);
evalcond[1]=(new_r20+(((-1.0)*sj4*x298)));
evalcond[2]=((((-1.0)*new_r10*x296))+((new_r00*sj3))+x291);
evalcond[3]=((((-1.0)*new_r11*x296))+((new_r01*sj3))+x292);
evalcond[4]=(((new_r11*sj3))+((cj4*x291))+((cj3*new_r01)));
evalcond[5]=(((x291*x294))+new_r01+((sj3*x292)));
evalcond[6]=(((new_r10*sj3))+(((-1.0)*cj4*x298))+x293);
evalcond[7]=(x297+new_r00+(((-1.0)*x294*x298)));
evalcond[8]=(((x291*x295))+new_r11+(((-1.0)*x292*x296)));
evalcond[9]=((((-1.0)*x291*x296))+(((-1.0)*x295*x298))+new_r10);
evalcond[10]=(((new_r11*x295))+x291+((new_r01*x294))+((new_r21*sj4)));
evalcond[11]=(((new_r20*sj4))+(((-1.0)*x298))+((new_r10*x295))+((cj4*x293)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x299 = IKatan2WithCheck(IkReal(((-1.0)*new_r21)),new_r20,IKFAST_ATAN2_MAGTHRESH);
if(!x299.valid){
continue;
}
CheckValue<IkReal> x300=IKPowWithIntegerCheck(IKsign(sj4),-1);
if(!x300.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x299.value)+(((1.5707963267949)*(x300.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[2];
evalcond[0]=(((sj4*(IKsin(j5))))+new_r21);
evalcond[1]=((((-1.0)*sj4*(IKcos(j5))))+new_r20);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j3eval[2];
IkReal x301=((1.0)*cj0);
IkReal x302=(r11*sj0);
IkReal x303=(cj0*r02);
IkReal x304=(sj1*sj2);
IkReal x305=(r10*sj0);
IkReal x306=(cj0*r00);
IkReal x307=(cj1*cj2);
IkReal x308=(r12*sj0);
IkReal x309=(cj0*r01);
IkReal x310=x112;
IkReal x311=(x307+x304);
IkReal x312=(sj0*x310);
IkReal x313=(cj0*x310);
IkReal x314=x116;
new_r00=(((x305*x314))+((r20*x310))+((x306*x314)));
new_r01=(((x302*x314))+((x309*x314))+((r21*x310)));
new_r02=(((x308*x314))+((x303*x314))+((r22*x310)));
new_r10=(((r00*sj0))+(((-1.0)*r10*x301)));
new_r11=(((r01*sj0))+(((-1.0)*r11*x301)));
new_r12=(((r02*sj0))+(((-1.0)*r12*x301)));
new_r20=(((x305*x310))+((r20*x311))+((x306*x310)));
new_r21=(((x302*x310))+((x309*x310))+((r21*x311)));
new_r22=(((x308*x310))+((x303*x310))+((r22*x311)));
j3eval[0]=sj4;
j3eval[1]=IKsign(sj4);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
IkReal x315=((1.0)*cj0);
IkReal x316=(r11*sj0);
IkReal x317=(cj0*r02);
IkReal x318=(sj1*sj2);
IkReal x319=(r10*sj0);
IkReal x320=(cj0*r00);
IkReal x321=(cj1*cj2);
IkReal x322=(r12*sj0);
IkReal x323=(cj0*r01);
IkReal x324=x112;
IkReal x325=(x321+x318);
IkReal x326=(sj0*x324);
IkReal x327=(cj0*x324);
IkReal x328=x116;
new_r00=(((r20*x324))+((x320*x328))+((x319*x328)));
new_r01=(((x323*x328))+((r21*x324))+((x316*x328)));
new_r02=(((x322*x328))+((r22*x324))+((x317*x328)));
new_r10=(((r00*sj0))+(((-1.0)*r10*x315)));
new_r11=(((r01*sj0))+(((-1.0)*r11*x315)));
new_r12=((((-1.0)*r12*x315))+((r02*sj0)));
new_r20=(((r20*x325))+((x320*x324))+((x319*x324)));
new_r21=(((x323*x324))+((r21*x325))+((x316*x324)));
new_r22=(((x322*x324))+((r22*x325))+((x317*x324)));
j3eval[0]=sj4;
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));
evalcond[1]=((-1.0)+new_r22);
evalcond[2]=new_r02;
evalcond[3]=new_r12;
evalcond[4]=new_r21;
evalcond[5]=new_r20;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x329=IKPowWithIntegerCheck(IKsign((((new_r01*new_r12))+(((-1.0)*new_r02*new_r11)))),-1);
if(!x329.valid){
continue;
}
CheckValue<IkReal> x330 = IKatan2WithCheck(IkReal((new_r02*sj5)),((-1.0)*new_r12*sj5),IKFAST_ATAN2_MAGTHRESH);
if(!x330.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x329.value)))+(x330.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[10];
IkReal x331=IKcos(j3);
IkReal x332=IKsin(j3);
IkReal x333=(sj5*x332);
IkReal x334=(cj5*x332);
IkReal x335=(sj5*x331);
IkReal x336=((1.0)*x331);
IkReal x337=(cj5*x336);
evalcond[0]=(((new_r12*x332))+((new_r02*x331)));
evalcond[1]=(((new_r12*x331))+(((-1.0)*new_r02*x332)));
evalcond[2]=(sj5+((new_r01*x331))+((new_r11*x332)));
evalcond[3]=(x335+x334+new_r01);
evalcond[4]=((((-1.0)*new_r10*x336))+sj5+((new_r00*x332)));
evalcond[5]=((((-1.0)*new_r11*x336))+cj5+((new_r01*x332)));
evalcond[6]=(x333+(((-1.0)*x337))+new_r00);
evalcond[7]=(x333+(((-1.0)*x337))+new_r11);
evalcond[8]=(((new_r00*x331))+((new_r10*x332))+(((-1.0)*cj5)));
evalcond[9]=((((-1.0)*x335))+(((-1.0)*x334))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)));
evalcond[1]=((1.0)+new_r22);
evalcond[2]=new_r02;
evalcond[3]=new_r12;
evalcond[4]=new_r21;
evalcond[5]=new_r20;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x338 = IKatan2WithCheck(IkReal((cj5*new_r02)),((-1.0)*cj5*new_r12),IKFAST_ATAN2_MAGTHRESH);
if(!x338.valid){
continue;
}
CheckValue<IkReal> x339=IKPowWithIntegerCheck(IKsign((((new_r00*new_r12))+(((-1.0)*new_r02*new_r10)))),-1);
if(!x339.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x338.value)+(((1.5707963267949)*(x339.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[10];
IkReal x340=IKcos(j3);
IkReal x341=IKsin(j3);
IkReal x342=(cj5*x341);
IkReal x343=(cj5*x340);
IkReal x344=((1.0)*x340);
IkReal x345=((1.0)*x341);
IkReal x346=(sj5*x344);
evalcond[0]=(((new_r02*x340))+((new_r12*x341)));
evalcond[1]=((((-1.0)*new_r02*x345))+((new_r12*x340)));
evalcond[2]=(cj5+((new_r00*x340))+((new_r10*x341)));
evalcond[3]=(((sj5*x341))+x343+new_r00);
evalcond[4]=(sj5+(((-1.0)*new_r10*x344))+((new_r00*x341)));
evalcond[5]=((((-1.0)*new_r11*x344))+cj5+((new_r01*x341)));
evalcond[6]=(x342+new_r01+(((-1.0)*x346)));
evalcond[7]=(x342+new_r10+(((-1.0)*x346)));
evalcond[8]=((((-1.0)*sj5))+((new_r11*x341))+((new_r01*x340)));
evalcond[9]=((((-1.0)*sj5*x345))+new_r11+(((-1.0)*x343)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j3]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x348=IKPowWithIntegerCheck(sj4,-1);
if(!x348.valid){
continue;
}
IkReal x347=x348.value;
CheckValue<IkReal> x349=IKPowWithIntegerCheck(new_r12,-1);
if(!x349.valid){
continue;
}
if( IKabs((x347*(x349.value)*(((-1.0)+(new_r02*new_r02)+(cj4*cj4))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r02*x347)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x347*(x349.value)*(((-1.0)+(new_r02*new_r02)+(cj4*cj4)))))+IKsqr(((-1.0)*new_r02*x347))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((x347*(x349.value)*(((-1.0)+(new_r02*new_r02)+(cj4*cj4)))), ((-1.0)*new_r02*x347));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[18];
IkReal x350=IKcos(j3);
IkReal x351=IKsin(j3);
IkReal x352=((1.0)*cj4);
IkReal x353=((1.0)*cj5);
IkReal x354=(cj4*x350);
IkReal x355=(sj4*x351);
IkReal x356=((1.0)*x350);
IkReal x357=(sj4*x350);
IkReal x358=(cj4*x351);
IkReal x359=(cj5*x351);
evalcond[0]=(x357+new_r02);
evalcond[1]=(x355+new_r12);
evalcond[2]=((((-1.0)*new_r02*x351))+((new_r12*x350)));
evalcond[3]=(sj4+((new_r02*x350))+((new_r12*x351)));
evalcond[4]=(sj5+(((-1.0)*new_r10*x356))+((new_r00*x351)));
evalcond[5]=(((new_r01*x351))+cj5+(((-1.0)*new_r11*x356)));
evalcond[6]=(((sj5*x354))+x359+new_r01);
evalcond[7]=(((new_r01*x350))+((cj4*sj5))+((new_r11*x351)));
evalcond[8]=((((-1.0)*cj5*x350*x352))+((sj5*x351))+new_r00);
evalcond[9]=(((sj5*x358))+new_r11+(((-1.0)*x350*x353)));
evalcond[10]=((((-1.0)*cj5*x352))+((new_r10*x351))+((new_r00*x350)));
evalcond[11]=(new_r10+(((-1.0)*sj5*x356))+(((-1.0)*x352*x359)));
evalcond[12]=(((new_r22*sj4))+((new_r02*x354))+((new_r12*x358)));
evalcond[13]=(((new_r10*x355))+(((-1.0)*new_r20*x352))+((new_r00*x357)));
evalcond[14]=(((new_r01*x357))+(((-1.0)*new_r21*x352))+((new_r11*x355)));
evalcond[15]=(((new_r01*x354))+sj5+((new_r21*sj4))+((new_r11*x358)));
evalcond[16]=((1.0)+(((-1.0)*new_r22*x352))+((new_r02*x357))+((new_r12*x355)));
evalcond[17]=(((new_r20*sj4))+(((-1.0)*x353))+((new_r10*x358))+((new_r00*x354)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x360=IKPowWithIntegerCheck(IKsign(sj4),-1);
if(!x360.valid){
continue;
}
CheckValue<IkReal> x361 = IKatan2WithCheck(IkReal(((-1.0)*new_r12)),((-1.0)*new_r02),IKFAST_ATAN2_MAGTHRESH);
if(!x361.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x360.value)))+(x361.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[18];
IkReal x362=IKcos(j3);
IkReal x363=IKsin(j3);
IkReal x364=((1.0)*cj4);
IkReal x365=((1.0)*cj5);
IkReal x366=(cj4*x362);
IkReal x367=(sj4*x363);
IkReal x368=((1.0)*x362);
IkReal x369=(sj4*x362);
IkReal x370=(cj4*x363);
IkReal x371=(cj5*x363);
evalcond[0]=(x369+new_r02);
evalcond[1]=(x367+new_r12);
evalcond[2]=((((-1.0)*new_r02*x363))+((new_r12*x362)));
evalcond[3]=(sj4+((new_r02*x362))+((new_r12*x363)));
evalcond[4]=(sj5+((new_r00*x363))+(((-1.0)*new_r10*x368)));
evalcond[5]=(cj5+((new_r01*x363))+(((-1.0)*new_r11*x368)));
evalcond[6]=(((sj5*x366))+x371+new_r01);
evalcond[7]=(((cj4*sj5))+((new_r01*x362))+((new_r11*x363)));
evalcond[8]=(((sj5*x363))+(((-1.0)*cj5*x362*x364))+new_r00);
evalcond[9]=((((-1.0)*x362*x365))+((sj5*x370))+new_r11);
evalcond[10]=((((-1.0)*cj5*x364))+((new_r00*x362))+((new_r10*x363)));
evalcond[11]=((((-1.0)*sj5*x368))+new_r10+(((-1.0)*x364*x371)));
evalcond[12]=(((new_r12*x370))+((new_r22*sj4))+((new_r02*x366)));
evalcond[13]=((((-1.0)*new_r20*x364))+((new_r00*x369))+((new_r10*x367)));
evalcond[14]=(((new_r01*x369))+((new_r11*x367))+(((-1.0)*new_r21*x364)));
evalcond[15]=(sj5+((new_r01*x366))+((new_r21*sj4))+((new_r11*x370)));
evalcond[16]=((1.0)+(((-1.0)*new_r22*x364))+((new_r02*x369))+((new_r12*x367)));
evalcond[17]=(((new_r20*sj4))+(((-1.0)*x365))+((new_r00*x366))+((new_r10*x370)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}
}
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - comau_nj220foundry (678b605ec06009a81a1afe5f3b069383)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000048"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
